name: Setup GitHub Secrets for OOM System

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to configure'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

jobs:
  setup-secrets:
    name: Setup GitHub Secrets
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create secrets template
      run: |
        cat > secrets-template.txt << 'EOF'
        # OOM System GitHub Secrets Configuration
        # Copy this template and add your actual values

        ## Database Credentials
        DATABASE_URL=postgresql://username:password@host:5432/oom_system
        DB_USERNAME=your_db_username
        DB_PASSWORD=your_db_password
        DB_HOST=your_db_host

        ## Redis Configuration
        REDIS_URL=redis://host:6379
        REDIS_PASSWORD=your_redis_password

        ## Authentication & Security
        JWT_SECRET_KEY=your_jwt_secret_key_here
        ENCRYPTION_KEY=your_encryption_key_here
        API_SECRET_KEY=your_api_secret_key

        ## AI/ML Service API Keys
        OPENAI_API_KEY=your_openai_api_key
        ANTHROPIC_API_KEY=your_anthropic_api_key
        HUGGINGFACE_API_KEY=your_huggingface_api_key
        PINECONE_API_KEY=your_pinecone_api_key

        ## Cloud Provider Credentials
        AWS_ACCESS_KEY_ID=your_aws_access_key
        AWS_SECRET_ACCESS_KEY=your_aws_secret_key
        AWS_REGION=us-west-2
        EKS_CLUSTER_NAME=oom-cluster

        ## Azure Credentials (if using Azure)
        AZURE_CLIENT_ID=your_azure_client_id
        AZURE_CLIENT_SECRET=your_azure_client_secret
        AZURE_TENANT_ID=your_azure_tenant_id

        ## Google Cloud Credentials (if using GCP)
        GCP_PROJECT_ID=your_gcp_project_id
        GCP_SERVICE_ACCOUNT_KEY=your_base64_encoded_service_account_json

        ## Monitoring & Observability
        GRAFANA_API_KEY=your_grafana_api_key
        GRAFANA_PASSWORD=your_grafana_admin_password
        PROMETHEUS_URL=http://prometheus:9090
        MONITORING_URL=http://grafana:3000

        ## Message Broker Credentials
        KAFKA_USERNAME=your_kafka_username
        KAFKA_PASSWORD=your_kafka_password
        KAFKA_BOOTSTRAP_SERVERS=localhost:9092

        ## Container Registry
        DOCKER_REGISTRY_USERNAME=your_docker_username
        DOCKER_REGISTRY_PASSWORD=your_docker_password
        GHCR_TOKEN=${GITHUB_TOKEN}

        ## External Services
        SLACK_WEBHOOK_URL=your_slack_webhook_url
        DATADOG_API_KEY=your_datadog_api_key
        NEW_RELIC_LICENSE_KEY=your_newrelic_license_key

        ## Environment URLs
        STAGING_URL=https://staging.oom-system.com
        PRODUCTION_URL=https://oom-system.com

        ## Feature Flags
        ENABLE_DEBUG_MODE=false
        ENABLE_EXPERIMENTAL_FEATURES=false
        ENABLE_TELEMETRY=true

        EOF

    - name: Upload secrets template
      uses: actions/upload-artifact@v3
      with:
        name: secrets-template-${{ inputs.environment }}
        path: secrets-template.txt

    - name: Create environment-specific configuration
      run: |
        mkdir -p config/environments

        cat > config/environments/${{ inputs.environment }}.env << 'EOF'
        # ${{ inputs.environment }} Environment Configuration
        ENVIRONMENT=${{ inputs.environment }}
        DEBUG_MODE=${{ inputs.environment == 'development' && 'true' || 'false' }}
        LOG_LEVEL=${{ inputs.environment == 'production' && 'INFO' || 'DEBUG' }}

        # Service Configuration
        SERVICE_REPLICAS=${{ inputs.environment == 'production' && '3' || '1' }}
        ENABLE_METRICS=true
        ENABLE_TRACING=true

        # Resource Limits
        MEMORY_LIMIT=${{ inputs.environment == 'production' && '2Gi' || '512Mi' }}
        CPU_LIMIT=${{ inputs.environment == 'production' && '1000m' || '500m' }}

        # Database Pool Settings
        DB_POOL_SIZE=${{ inputs.environment == 'production' && '20' || '5' }}
        DB_MAX_OVERFLOW=${{ inputs.environment == 'production' && '30' || '10' }}

        EOF

    - name: Create secrets setup script
      run: |
        cat > setup-secrets.sh << 'EOF'
        #!/bin/bash
        # GitHub Secrets Setup Script for OOM System

        set -e

        echo "🔐 Setting up GitHub Secrets for OOM System"
        echo "Environment: $1"

        if [ -z "$1" ]; then
          echo "Usage: $0 <environment>"
          echo "Environments: development, staging, production"
          exit 1
        fi

        ENVIRONMENT=$1

        # Check if gh CLI is installed and authenticated
        if ! command -v gh &> /dev/null; then
          echo "❌ GitHub CLI (gh) is not installed"
          echo "Install it from: https://cli.github.com/"
          exit 1
        fi

        if ! gh auth status &> /dev/null; then
          echo "❌ Not authenticated with GitHub CLI"
          echo "Run: gh auth login"
          exit 1
        fi

        echo "📝 Creating environment: $ENVIRONMENT"
        gh api repos/:owner/:repo/environments/$ENVIRONMENT --method PUT || true

        # Function to set secret
        set_secret() {
          local name=$1
          local description=$2

          echo "🔑 Setting secret: $name"
          echo "Description: $description"
          read -s -p "Enter value for $name: " value
          echo

          if [ "$ENVIRONMENT" != "development" ]; then
            gh secret set $name --body "$value" --env $ENVIRONMENT
          else
            gh secret set $name --body "$value"
          fi

          echo "✅ Secret $name set successfully"
          echo
        }

        echo "🚀 Setting up core secrets..."

        # Database secrets
        set_secret "DATABASE_URL" "PostgreSQL database connection URL"
        set_secret "REDIS_URL" "Redis connection URL"

        # Authentication
        set_secret "JWT_SECRET_KEY" "JWT token signing key"

        # AI/ML APIs
        echo "🤖 AI/ML API Keys (press Enter to skip if not using):"
        set_secret "OPENAI_API_KEY" "OpenAI API key for GPT models"
        set_secret "ANTHROPIC_API_KEY" "Anthropic API key for Claude models"

        # Cloud provider
        echo "☁️ Cloud Provider Credentials:"
        set_secret "AWS_ACCESS_KEY_ID" "AWS Access Key ID"
        set_secret "AWS_SECRET_ACCESS_KEY" "AWS Secret Access Key"

        # Monitoring
        echo "📊 Monitoring & Observability:"
        set_secret "GRAFANA_API_KEY" "Grafana API key for dashboard access"

        # Notifications
        echo "📢 Notifications:"
        set_secret "SLACK_WEBHOOK_URL" "Slack webhook URL for notifications"

        echo "🎉 GitHub Secrets setup completed for $ENVIRONMENT environment!"
        echo "📋 Next steps:"
        echo "  1. Review the secrets in GitHub repository settings"
        echo "  2. Update the environment configuration in config/environments/$ENVIRONMENT.env"
        echo "  3. Test the deployment pipeline"

        EOF

        chmod +x setup-secrets.sh

    - name: Upload setup script
      uses: actions/upload-artifact@v3
      with:
        name: setup-secrets-script
        path: setup-secrets.sh

    - name: Generate secrets documentation
      run: |
        cat > SECRETS_DOCUMENTATION.md << 'EOF'
        # OOM System GitHub Secrets Documentation

        ## Overview
        This document describes all GitHub secrets required for the OOM system deployment and operation.

        ## Core System Secrets

        ### Database & Storage
        | Secret Name | Description | Required | Example |
        |-------------|-------------|----------|---------|
        | `DATABASE_URL` | PostgreSQL connection string | ✅ | `postgresql://user:pass@host:5432/db` |
        | `REDIS_URL` | Redis connection string | ✅ | `redis://host:6379` |
        | `DB_USERNAME` | Database username | ✅ | `oom_user` |
        | `DB_PASSWORD` | Database password | ✅ | `secure_password` |

        ### Authentication & Security
        | Secret Name | Description | Required | Example |
        |-------------|-------------|----------|---------|
        | `JWT_SECRET_KEY` | JWT token signing key | ✅ | `your-256-bit-secret` |
        | `ENCRYPTION_KEY` | Data encryption key | ✅ | `32-byte-encryption-key` |
        | `API_SECRET_KEY` | API authentication key | ✅ | `api-secret-key` |

        ### AI/ML Services
        | Secret Name | Description | Required | Example |
        |-------------|-------------|----------|---------|
        | `OPENAI_API_KEY` | OpenAI API access | ⭕ | `sk-...` |
        | `ANTHROPIC_API_KEY` | Anthropic Claude API | ⭕ | `sk-ant-...` |
        | `HUGGINGFACE_API_KEY` | HuggingFace API | ⭕ | `hf_...` |
        | `PINECONE_API_KEY` | Pinecone vector DB | ⭕ | `your-pinecone-key` |

        ### Cloud Infrastructure
        | Secret Name | Description | Required | Example |
        |-------------|-------------|----------|---------|
        | `AWS_ACCESS_KEY_ID` | AWS access key | ⭕ | `AKIA...` |
        | `AWS_SECRET_ACCESS_KEY` | AWS secret key | ⭕ | `secret-key` |
        | `AWS_REGION` | AWS region | ⭕ | `us-west-2` |
        | `EKS_CLUSTER_NAME` | Kubernetes cluster | ⭕ | `oom-cluster` |

        ### Monitoring & Observability
        | Secret Name | Description | Required | Example |
        |-------------|-------------|----------|---------|
        | `GRAFANA_API_KEY` | Grafana API access | ⭕ | `eyJ...` |
        | `PROMETHEUS_URL` | Prometheus endpoint | ⭕ | `http://prometheus:9090` |
        | `DATADOG_API_KEY` | DataDog monitoring | ⭕ | `your-datadog-key` |

        ### External Services
        | Secret Name | Description | Required | Example |
        |-------------|-------------|----------|---------|
        | `SLACK_WEBHOOK_URL` | Slack notifications | ⭕ | `https://hooks.slack.com/...` |
        | `DOCKER_REGISTRY_USERNAME` | Container registry | ⭕ | `username` |
        | `DOCKER_REGISTRY_PASSWORD` | Container registry | ⭕ | `password` |

        ## Environment-Specific Secrets

        ### Development
        - Minimal security requirements
        - Local database connections
        - Debug mode enabled

        ### Staging
        - Production-like security
        - Staging database connections
        - Performance monitoring enabled

        ### Production
        - Maximum security requirements
        - Production database connections
        - Full monitoring and alerting

        ## Setup Instructions

        ### Using the Setup Script
        1. Download the `setup-secrets.sh` script from GitHub Actions artifacts
        2. Make it executable: `chmod +x setup-secrets.sh`
        3. Run it: `./setup-secrets.sh <environment>`
        4. Follow the interactive prompts

        ### Manual Setup
        1. Go to GitHub repository → Settings → Secrets and variables → Actions
        2. Create new repository secrets or environment secrets
        3. Add each required secret with the appropriate value

        ### Validation
        After setting up secrets, validate the configuration:
        ```bash
        gh secret list
        gh secret list --env staging
        gh secret list --env production
        ```

        ## Security Best Practices

        1. **Use Environment Secrets**: For staging and production environments
        2. **Rotate Regularly**: Update secrets every 90 days
        3. **Minimal Permissions**: Grant least privilege access
        4. **Monitor Usage**: Track secret access in audit logs
        5. **Backup Safely**: Store backup copies securely

        ## Troubleshooting

        ### Common Issues
        1. **Secret not found**: Check secret name spelling and environment
        2. **Access denied**: Verify repository permissions
        3. **Invalid format**: Ensure secret values are properly formatted

        ### Testing Secrets
        ```bash
        # Test database connection
        gh secret get DATABASE_URL | psql

        # Test API keys
        curl -H "Authorization: Bearer $(gh secret get OPENAI_API_KEY)" \
             https://api.openai.com/v1/models
        ```

        ## Support
        For questions about GitHub secrets setup, contact the DevOps team or create an issue in the repository.

        EOF

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: secrets-documentation
        path: SECRETS_DOCUMENTATION.md

    - name: Summary
      run: |
        echo "✅ GitHub Secrets setup completed!"
        echo ""
        echo "📋 Generated files:"
        echo "  - secrets-template.txt: Template with all required secrets"
        echo "  - setup-secrets.sh: Interactive setup script"
        echo "  - SECRETS_DOCUMENTATION.md: Complete documentation"
        echo "  - config/environments/${{ inputs.environment }}.env: Environment configuration"
        echo ""
        echo "🚀 Next steps:"
        echo "  1. Download the artifacts from this workflow run"
        echo "  2. Run the setup-secrets.sh script to configure your secrets"
        echo "  3. Test the CI/CD pipeline with your new secrets"
